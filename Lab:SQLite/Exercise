1. Exercises
In each exercise, measure:

memory usage,
time needed to generate records,
time taken to search for a record.
1.1. Exercise 1
Write a C program that dynamically allocates memory for a data structure containing the following attributes: id (integer), name (string, 20 characters), and description (string, 90 characters).

This can be done as follows:

struct Rec {
  int id; /* unique identifier, primary key */
  char name[20]; /* name */
  char desc[90]; /* description */
};
Fill the structure with sample data (the values do not matter, but id must be consecutive numbers starting from 0); generate 1,000,000 records.

Sequentially search for a record with an id equal to 999999.

Note: In shared environments, execution time may vary depending on the load generated by other users. Repeat each experiment several times for reliable measurements.

1.2. Exercise 2
Repeat exercise 1 using SQLite. Check different combinations of parameters:

data storage method – memory vs. file,
use of transactions – adding BEGIN and COMMIT before and after the command sequence,
use of indexes,
different journaling modes – by setting different values of the journal_mode parameter, especially DELETE (default) and WAL (write-ahead log).
2. Report
In the report, prepare a summary of results for different configurations and combinations of parameters, along with a brief comment on why a particular change has a specific impact on performance.
